{"version":3,"sources":["components/Editor.js","components/Preview.js","Placeholder.js","Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","react_default","a","createElement","className","id","onChange","change","value","text","Preview","marked","setOptions","breaks","Renderer","link","href","title","concat","dangerouslySetInnerHTML","__html","sanitaze","PLACEHOLDER","Previewer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","e","setState","target","components_Editor","handleChange","bind","components_Preview","Component","App","src_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAiBeA,EAfA,SAACC,GACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,cACpBJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCADjB,UAIAH,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASC,SAAUN,EAAMO,OAAQC,MAAOR,EAAMS,yBCc5DC,EAnBC,SAACV,GAQb,OAPAW,IAAOC,WAAW,CACdC,QAAQ,KAEK,IAAIF,IAAOG,UACnBC,KAAO,SAASC,EAAMC,EAAOR,GAClC,kCAAAS,OAAmCF,EAAnC,MAAAE,OAA4CT,EAA5C,SAGAR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,eACpBJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCADjB,WAIAH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUc,wBAA2B,CAACC,OAAQT,IAAOX,EAAMS,KAAM,CAAEY,UAAS,SC6BjFC,EA/CE,8qCC2BFC,cArBX,SAAAA,EAAYvB,GAAM,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KACD+B,MAAQ,CACTtB,KAAMa,GAHIE,4EAOLQ,GACTL,KAAKM,SAAS,CAACxB,KAAMuB,EAAEE,OAAO1B,yCAI9B,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACgC,EAAD,CAAQ5B,OAAQoB,KAAKS,aAAaC,KAAKV,MAAOlB,KAAMkB,KAAKI,MAAMtB,OAC/DR,EAAAC,EAAAC,cAACmC,EAAD,CAAS7B,KAAMkB,KAAKI,MAAMtB,eAhBlB8B,aCSTC,0LARX,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsC,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16e51877.chunk.js","sourcesContent":["import React from 'react';\n\nconst Editor = (props) => {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"top\" id=\"editor-top\">\n                    <i className=\"fa fa-free-code-camp icon-left\"></i>\n                    Editor\n                </div>\n                <textarea id=\"editor\" onChange={props.change} value={props.text}>\n\n                </textarea>\n            </div>\n        )\n    }\n\n\nexport default Editor;","import React from 'react';\nimport marked from 'marked';\n\n\nconst Preview = (props) => {\n    marked.setOptions({\n        breaks: true,\n    })\n    const renderer = new marked.Renderer();\n    renderer.link = function(href, title, text){\n        return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n    }\n    return(\n        <div className=\"wrapper\">\n            <div className=\"top\" id=\"preview-top\">\n                <i className=\"fa fa-free-code-camp icon-left\"></i>\n                Preview\n            </div>\n            <div id='preview' dangerouslySetInnerHTML = {{__html: marked(props.text, { sanitaze:true })}}></div>\n        </div>\n    )\n}\n\nexport default Preview;","const PLACEHOLDER = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\nexport default PLACEHOLDER;","import React, { Component } from 'react';\nimport Editor from \"./components/Editor\";\nimport Preview from \"./components/Preview\";\nimport PLACEHOLDER from \"./Placeholder\";\n\nclass Previewer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            text: PLACEHOLDER\n        }\n    }\n\n    handleChange(e){\n        this.setState({text: e.target.value })\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                <Editor change={this.handleChange.bind(this)} text={this.state.text}/>\n                <Preview text={this.state.text}/>\n            </div>\n        )\n    }\n}\n\nexport default Previewer;","import React, { Component } from 'react';\nimport Previewer from \"./Previewer\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Previewer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}